import { Address, TransactionSigner, IInstruction, Lamports, Rpc, GetAccountInfoApi, GetMultipleAccountsApi, GetMinimumBalanceForRentExemptionApi, GetEpochInfoApi, GetProgramAccountsApi, Account, GetTokenAccountsByOwnerApi } from '@solana/web3.js';
import { DecreaseLiquidityQuote, CollectFeesQuote, CollectRewardsQuote, IncreaseLiquidityQuote, ExactInSwapQuote, ExactOutSwapQuote } from '@orca-so/whirlpools-core';
import { Whirlpool, Position, PositionBundle } from '@orca-so/whirlpools-client';

declare const DEFAULT_ADDRESS: Address<"11111111111111111111111111111111">;
declare const DEFAULT_WHIRLPOOLS_CONFIG_ADDRESSES: {
    solanaMainnet: Address<"2LecshUwdy9xi7meFgHtFJQNSKk4KdTrcpvaB56dP2NQ">;
    solanaDevnet: Address<"FcrweFY1G9HJAHG5inkGB6pKg1HZ6x9UC2WioAfWrGkR">;
    eclipseMainnet: Address<"FVG4oDbGv16hqTUbovjyGmtYikn6UBEnazz6RVDMEFwv">;
    eclipseTestnet: Address<"FPydDjRdZu9sT7HVd6ANhfjh85KLq21Pefr5YWWMRPFp">;
};
declare const DEFAULT_WHIRLPOOLS_CONFIG_EXTENSION_ADDRESS: Address<"777H5H3Tp9U11uRVRzFwM8BinfiakbaLT8vQpeuhvEiH">;
declare let WHIRLPOOLS_CONFIG_ADDRESS: Address;
declare let WHIRLPOOLS_CONFIG_EXTENSION_ADDRESS: Address;
declare function setWhirlpoolsConfig(config: Address | keyof typeof DEFAULT_WHIRLPOOLS_CONFIG_ADDRESSES): Promise<void>;
declare const SPLASH_POOL_TICK_SPACING = 32896;
declare const DEFAULT_FUNDER: TransactionSigner;
declare let FUNDER: TransactionSigner;
declare function setDefaultFunder(funder: TransactionSigner | Address | null): void;
declare const DEFAULT_SLIPPAGE_TOLERANCE_BPS = 100;
declare let SLIPPAGE_TOLERANCE_BPS: number;
declare function setDefaultSlippageToleranceBps(slippageToleranceBps: number): void;
type NativeMintWrappingStrategy = "keypair" | "seed" | "ata" | "none";
declare const DEFAULT_NATIVE_MINT_WRAPPING_STRATEGY: NativeMintWrappingStrategy;
declare let NATIVE_MINT_WRAPPING_STRATEGY: NativeMintWrappingStrategy;
declare function setNativeMintWrappingStrategy(strategy: NativeMintWrappingStrategy): void;
declare function resetConfiguration(): void;

type CreatePoolInstructions = {
    instructions: IInstruction[];
    initializationCost: Lamports;
    poolAddress: Address;
};
declare function createSplashPoolInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi>, tokenMintA: Address, tokenMintB: Address, initialPrice?: number, funder?: TransactionSigner): Promise<CreatePoolInstructions>;
declare function createConcentratedLiquidityPoolInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi>, tokenMintA: Address, tokenMintB: Address, tickSpacing: number, initialPrice?: number, funder?: TransactionSigner): Promise<CreatePoolInstructions>;

type DecreaseLiquidityQuoteParam = {
    liquidity: bigint;
} | {
    tokenA: bigint;
} | {
    tokenB: bigint;
};
type DecreaseLiquidityInstructions = {
    quote: DecreaseLiquidityQuote;
    instructions: IInstruction[];
};
declare function decreaseLiquidityInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, positionMintAddress: Address, param: DecreaseLiquidityQuoteParam, slippageToleranceBps?: number, authority?: TransactionSigner): Promise<DecreaseLiquidityInstructions>;
type ClosePositionInstructions = DecreaseLiquidityInstructions & {
    feesQuote: CollectFeesQuote;
    rewardsQuote: CollectRewardsQuote;
};
declare function closePositionInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, positionMintAddress: Address, slippageToleranceBps?: number, authority?: TransactionSigner): Promise<ClosePositionInstructions>;

type HarvestPositionInstructions = {
    feesQuote: CollectFeesQuote;
    rewardsQuote: CollectRewardsQuote;
    instructions: IInstruction[];
};
declare function harvestPositionInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, positionMintAddress: Address, authority?: TransactionSigner): Promise<HarvestPositionInstructions>;

type IncreaseLiquidityQuoteParam = {
    liquidity: bigint;
} | {
    tokenA: bigint;
} | {
    tokenB: bigint;
};
type IncreaseLiquidityInstructions = {
    quote: IncreaseLiquidityQuote;
    instructions: IInstruction[];
};
declare function increaseLiquidityInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, positionMintAddress: Address, param: IncreaseLiquidityQuoteParam, slippageToleranceBps?: number, authority?: TransactionSigner): Promise<IncreaseLiquidityInstructions>;
type OpenPositionInstructions = IncreaseLiquidityInstructions & {
    initializationCost: Lamports;
    positionMint: Address;
};
declare function openFullRangePositionInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, poolAddress: Address, param: IncreaseLiquidityQuoteParam, slippageToleranceBps?: number, funder?: TransactionSigner): Promise<OpenPositionInstructions>;
declare function openPositionInstructions(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, poolAddress: Address, param: IncreaseLiquidityQuoteParam, lowerPrice: number, upperPrice: number, slippageToleranceBps?: number, funder?: TransactionSigner): Promise<OpenPositionInstructions>;

type InitializablePool = {
    initialized: false;
} & Pick<Whirlpool, "whirlpoolsConfig" | "tickSpacing" | "feeRate" | "protocolFeeRate" | "tokenMintA" | "tokenMintB">;
type InitializedPool = {
    initialized: true;
    price: number;
} & Whirlpool;
type PoolInfo = (InitializablePool | InitializedPool) & {
    address: Address;
};
declare function fetchSplashPool(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi>, tokenMintOne: Address, tokenMintTwo: Address): Promise<PoolInfo>;
declare function fetchConcentratedLiquidityPool(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi>, tokenMintOne: Address, tokenMintTwo: Address, tickSpacing: number): Promise<PoolInfo>;
declare function fetchWhirlpoolsByTokenPair(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetProgramAccountsApi>, tokenMintOne: Address, tokenMintTwo: Address): Promise<PoolInfo[]>;

type HydratedPosition = Account<Position> & {
    isPositionBundle: false;
};
type HydratedPositionBundle = Account<PositionBundle> & {
    positions: Account<Position>[];
    isPositionBundle: true;
};
type PositionOrBundle = HydratedPosition | HydratedPositionBundle;
type PositionData = PositionOrBundle & {
    tokenProgram: Address;
};
declare function fetchPositionsForOwner(rpc: Rpc<GetTokenAccountsByOwnerApi & GetMultipleAccountsApi>, owner: Address): Promise<PositionData[]>;
declare function fetchPositionsInWhirlpool(rpc: Rpc<GetProgramAccountsApi>, whirlpool: Address): Promise<HydratedPosition[]>;

type ExactInParams = {
    inputAmount: bigint;
};
type ExactOutParams = {
    outputAmount: bigint;
};
type SwapParams = (ExactInParams | ExactOutParams) & {
    mint: Address;
};
type SwapQuote<T extends SwapParams> = T extends ExactInParams ? ExactInSwapQuote : ExactOutSwapQuote;
type SwapInstructions<T extends SwapParams> = {
    instructions: IInstruction[];
    quote: SwapQuote<T>;
};
declare function swapInstructions<T extends SwapParams>(rpc: Rpc<GetAccountInfoApi & GetMultipleAccountsApi & GetMinimumBalanceForRentExemptionApi & GetEpochInfoApi>, params: T, poolAddress: Address, slippageToleranceBps?: number, signer?: TransactionSigner): Promise<SwapInstructions<T>>;

export { type ClosePositionInstructions, type CreatePoolInstructions, DEFAULT_ADDRESS, DEFAULT_FUNDER, DEFAULT_NATIVE_MINT_WRAPPING_STRATEGY, DEFAULT_SLIPPAGE_TOLERANCE_BPS, DEFAULT_WHIRLPOOLS_CONFIG_ADDRESSES, DEFAULT_WHIRLPOOLS_CONFIG_EXTENSION_ADDRESS, type DecreaseLiquidityInstructions, type DecreaseLiquidityQuoteParam, type ExactInParams, type ExactOutParams, FUNDER, type HarvestPositionInstructions, type HydratedPosition, type HydratedPositionBundle, type IncreaseLiquidityInstructions, type IncreaseLiquidityQuoteParam, type InitializablePool, type InitializedPool, NATIVE_MINT_WRAPPING_STRATEGY, type NativeMintWrappingStrategy, type OpenPositionInstructions, type PoolInfo, type PositionData, type PositionOrBundle, SLIPPAGE_TOLERANCE_BPS, SPLASH_POOL_TICK_SPACING, type SwapInstructions, type SwapParams, type SwapQuote, WHIRLPOOLS_CONFIG_ADDRESS, WHIRLPOOLS_CONFIG_EXTENSION_ADDRESS, closePositionInstructions, createConcentratedLiquidityPoolInstructions, createSplashPoolInstructions, decreaseLiquidityInstructions, fetchConcentratedLiquidityPool, fetchPositionsForOwner, fetchPositionsInWhirlpool, fetchSplashPool, fetchWhirlpoolsByTokenPair, harvestPositionInstructions, increaseLiquidityInstructions, openFullRangePositionInstructions, openPositionInstructions, resetConfiguration, setDefaultFunder, setDefaultSlippageToleranceBps, setNativeMintWrappingStrategy, setWhirlpoolsConfig, swapInstructions };
