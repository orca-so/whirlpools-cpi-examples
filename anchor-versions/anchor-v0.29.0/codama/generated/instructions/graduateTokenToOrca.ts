/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { WHIRLPOOL_CPI_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GRADUATE_TOKEN_TO_ORCA_DISCRIMINATOR = new Uint8Array([
  172, 30, 71, 244, 97, 6, 1, 237,
]);

export function getGraduateTokenToOrcaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GRADUATE_TOKEN_TO_ORCA_DISCRIMINATOR
  );
}

export type GraduateTokenToOrcaInstruction<
  TProgram extends string = typeof WHIRLPOOL_CPI_PROGRAM_ADDRESS,
  TAccountWhirlpoolProgram extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountTokenMintA extends string | IAccountMeta<string> = string,
  TAccountTokenMintB extends string | IAccountMeta<string> = string,
  TAccountTokenBadgeA extends string | IAccountMeta<string> = string,
  TAccountTokenBadgeB extends string | IAccountMeta<string> = string,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountTokenVaultA extends string | IAccountMeta<string> = string,
  TAccountTokenVaultB extends string | IAccountMeta<string> = string,
  TAccountFeeTier extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountPositionOwner extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionMint extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountLockConfig extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpoolProgram extends string
        ? ReadonlyAccount<TAccountWhirlpoolProgram>
        : TAccountWhirlpoolProgram,
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountTokenBadgeA extends string
        ? WritableAccount<TAccountTokenBadgeA>
        : TAccountTokenBadgeA,
      TAccountTokenBadgeB extends string
        ? WritableAccount<TAccountTokenBadgeB>
        : TAccountTokenBadgeB,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenVaultA extends string
        ? WritableSignerAccount<TAccountTokenVaultA> &
            IAccountSignerMeta<TAccountTokenVaultA>
        : TAccountTokenVaultA,
      TAccountTokenVaultB extends string
        ? WritableSignerAccount<TAccountTokenVaultB> &
            IAccountSignerMeta<TAccountTokenVaultB>
        : TAccountTokenVaultB,
      TAccountFeeTier extends string
        ? ReadonlyAccount<TAccountFeeTier>
        : TAccountFeeTier,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountPositionOwner extends string
        ? ReadonlyAccount<TAccountPositionOwner>
        : TAccountPositionOwner,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? WritableSignerAccount<TAccountPositionMint> &
            IAccountSignerMeta<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountTokenOwnerAccountA extends string
        ? WritableAccount<TAccountTokenOwnerAccountA>
        : TAccountTokenOwnerAccountA,
      TAccountTokenOwnerAccountB extends string
        ? WritableAccount<TAccountTokenOwnerAccountB>
        : TAccountTokenOwnerAccountB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountLockConfig extends string
        ? ReadonlyAccount<TAccountLockConfig>
        : TAccountLockConfig,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountMetadataUpdateAuth extends string
        ? ReadonlyAccount<TAccountMetadataUpdateAuth>
        : TAccountMetadataUpdateAuth,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type GraduateTokenToOrcaInstructionData = {
  discriminator: ReadonlyUint8Array;
  tickSpacing: number;
  initialSqrtPrice: bigint;
  startTickIndexLower: number;
  startTickIndexUpper: number;
  tickLowerIndex: number;
  tickUpperIndex: number;
  withTokenMetadataExtension: boolean;
  liquidityAmount: bigint;
  tokenMaxA: bigint;
  tokenMaxB: bigint;
};

export type GraduateTokenToOrcaInstructionDataArgs = {
  tickSpacing: number;
  initialSqrtPrice: number | bigint;
  startTickIndexLower: number;
  startTickIndexUpper: number;
  tickLowerIndex: number;
  tickUpperIndex: number;
  withTokenMetadataExtension: boolean;
  liquidityAmount: number | bigint;
  tokenMaxA: number | bigint;
  tokenMaxB: number | bigint;
};

export function getGraduateTokenToOrcaInstructionDataEncoder(): Encoder<GraduateTokenToOrcaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tickSpacing', getU16Encoder()],
      ['initialSqrtPrice', getU128Encoder()],
      ['startTickIndexLower', getI32Encoder()],
      ['startTickIndexUpper', getI32Encoder()],
      ['tickLowerIndex', getI32Encoder()],
      ['tickUpperIndex', getI32Encoder()],
      ['withTokenMetadataExtension', getBooleanEncoder()],
      ['liquidityAmount', getU128Encoder()],
      ['tokenMaxA', getU64Encoder()],
      ['tokenMaxB', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: GRADUATE_TOKEN_TO_ORCA_DISCRIMINATOR,
    })
  );
}

export function getGraduateTokenToOrcaInstructionDataDecoder(): Decoder<GraduateTokenToOrcaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tickSpacing', getU16Decoder()],
    ['initialSqrtPrice', getU128Decoder()],
    ['startTickIndexLower', getI32Decoder()],
    ['startTickIndexUpper', getI32Decoder()],
    ['tickLowerIndex', getI32Decoder()],
    ['tickUpperIndex', getI32Decoder()],
    ['withTokenMetadataExtension', getBooleanDecoder()],
    ['liquidityAmount', getU128Decoder()],
    ['tokenMaxA', getU64Decoder()],
    ['tokenMaxB', getU64Decoder()],
  ]);
}

export function getGraduateTokenToOrcaInstructionDataCodec(): Codec<
  GraduateTokenToOrcaInstructionDataArgs,
  GraduateTokenToOrcaInstructionData
> {
  return combineCodec(
    getGraduateTokenToOrcaInstructionDataEncoder(),
    getGraduateTokenToOrcaInstructionDataDecoder()
  );
}

export type GraduateTokenToOrcaInput<
  TAccountWhirlpoolProgram extends string = string,
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenBadgeA extends string = string,
  TAccountTokenBadgeB extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountFeeTier extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountPositionOwner extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountTokenOwnerAccountA extends string = string,
  TAccountTokenOwnerAccountB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountLockConfig extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  whirlpoolProgram: Address<TAccountWhirlpoolProgram>;
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpool: Address<TAccountWhirlpool>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenBadgeA: Address<TAccountTokenBadgeA>;
  tokenBadgeB: Address<TAccountTokenBadgeB>;
  funder: TransactionSigner<TAccountFunder>;
  tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
  tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
  feeTier: Address<TAccountFeeTier>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  positionOwner: Address<TAccountPositionOwner>;
  position: Address<TAccountPosition>;
  positionMint: TransactionSigner<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
  tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  lockConfig: Address<TAccountLockConfig>;
  token2022Program: Address<TAccountToken2022Program>;
  metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  tickSpacing: GraduateTokenToOrcaInstructionDataArgs['tickSpacing'];
  initialSqrtPrice: GraduateTokenToOrcaInstructionDataArgs['initialSqrtPrice'];
  startTickIndexLower: GraduateTokenToOrcaInstructionDataArgs['startTickIndexLower'];
  startTickIndexUpper: GraduateTokenToOrcaInstructionDataArgs['startTickIndexUpper'];
  tickLowerIndex: GraduateTokenToOrcaInstructionDataArgs['tickLowerIndex'];
  tickUpperIndex: GraduateTokenToOrcaInstructionDataArgs['tickUpperIndex'];
  withTokenMetadataExtension: GraduateTokenToOrcaInstructionDataArgs['withTokenMetadataExtension'];
  liquidityAmount: GraduateTokenToOrcaInstructionDataArgs['liquidityAmount'];
  tokenMaxA: GraduateTokenToOrcaInstructionDataArgs['tokenMaxA'];
  tokenMaxB: GraduateTokenToOrcaInstructionDataArgs['tokenMaxB'];
};

export function getGraduateTokenToOrcaInstruction<
  TAccountWhirlpoolProgram extends string,
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpool extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenBadgeA extends string,
  TAccountTokenBadgeB extends string,
  TAccountFunder extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountFeeTier extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountPositionOwner extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountTokenOwnerAccountA extends string,
  TAccountTokenOwnerAccountB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountLockConfig extends string,
  TAccountToken2022Program extends string,
  TAccountMetadataUpdateAuth extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_CPI_PROGRAM_ADDRESS,
>(
  input: GraduateTokenToOrcaInput<
    TAccountWhirlpoolProgram,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpool,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPositionOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountLockConfig,
    TAccountToken2022Program,
    TAccountMetadataUpdateAuth,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): GraduateTokenToOrcaInstruction<
  TProgramAddress,
  TAccountWhirlpoolProgram,
  TAccountWhirlpoolsConfig,
  TAccountWhirlpool,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountTokenBadgeA,
  TAccountTokenBadgeB,
  TAccountFunder,
  TAccountTokenVaultA,
  TAccountTokenVaultB,
  TAccountFeeTier,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountPositionOwner,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountTokenOwnerAccountA,
  TAccountTokenOwnerAccountB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountLockConfig,
  TAccountToken2022Program,
  TAccountMetadataUpdateAuth,
  TAccountSystemProgram,
  TAccountRent,
  TAccountAssociatedTokenProgram,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? WHIRLPOOL_CPI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolProgram: {
      value: input.whirlpoolProgram ?? null,
      isWritable: false,
    },
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenBadgeA: { value: input.tokenBadgeA ?? null, isWritable: true },
    tokenBadgeB: { value: input.tokenBadgeB ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    feeTier: { value: input.feeTier ?? null, isWritable: false },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    positionOwner: { value: input.positionOwner ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    tokenOwnerAccountA: {
      value: input.tokenOwnerAccountA ?? null,
      isWritable: true,
    },
    tokenOwnerAccountB: {
      value: input.tokenOwnerAccountB ?? null,
      isWritable: true,
    },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    lockConfig: { value: input.lockConfig ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpoolProgram),
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenBadgeA),
      getAccountMeta(accounts.tokenBadgeB),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.feeTier),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.positionOwner),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.tokenOwnerAccountA),
      getAccountMeta(accounts.tokenOwnerAccountB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.lockConfig),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.metadataUpdateAuth),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getGraduateTokenToOrcaInstructionDataEncoder().encode(
      args as GraduateTokenToOrcaInstructionDataArgs
    ),
  } as GraduateTokenToOrcaInstruction<
    TProgramAddress,
    TAccountWhirlpoolProgram,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpool,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPositionOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountLockConfig,
    TAccountToken2022Program,
    TAccountMetadataUpdateAuth,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedGraduateTokenToOrcaInstruction<
  TProgram extends string = typeof WHIRLPOOL_CPI_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolProgram: TAccountMetas[0];
    whirlpoolsConfig: TAccountMetas[1];
    whirlpool: TAccountMetas[2];
    tokenMintA: TAccountMetas[3];
    tokenMintB: TAccountMetas[4];
    tokenBadgeA: TAccountMetas[5];
    tokenBadgeB: TAccountMetas[6];
    funder: TAccountMetas[7];
    tokenVaultA: TAccountMetas[8];
    tokenVaultB: TAccountMetas[9];
    feeTier: TAccountMetas[10];
    tickArrayLower: TAccountMetas[11];
    tickArrayUpper: TAccountMetas[12];
    positionOwner: TAccountMetas[13];
    position: TAccountMetas[14];
    positionMint: TAccountMetas[15];
    positionTokenAccount: TAccountMetas[16];
    tokenOwnerAccountA: TAccountMetas[17];
    tokenOwnerAccountB: TAccountMetas[18];
    tokenProgramA: TAccountMetas[19];
    tokenProgramB: TAccountMetas[20];
    lockConfig: TAccountMetas[21];
    token2022Program: TAccountMetas[22];
    metadataUpdateAuth: TAccountMetas[23];
    systemProgram: TAccountMetas[24];
    rent: TAccountMetas[25];
    associatedTokenProgram: TAccountMetas[26];
    memoProgram: TAccountMetas[27];
  };
  data: GraduateTokenToOrcaInstructionData;
};

export function parseGraduateTokenToOrcaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGraduateTokenToOrcaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 28) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolProgram: getNextAccount(),
      whirlpoolsConfig: getNextAccount(),
      whirlpool: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      tokenBadgeA: getNextAccount(),
      tokenBadgeB: getNextAccount(),
      funder: getNextAccount(),
      tokenVaultA: getNextAccount(),
      tokenVaultB: getNextAccount(),
      feeTier: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      positionOwner: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      tokenOwnerAccountA: getNextAccount(),
      tokenOwnerAccountB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      lockConfig: getNextAccount(),
      token2022Program: getNextAccount(),
      metadataUpdateAuth: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getGraduateTokenToOrcaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
