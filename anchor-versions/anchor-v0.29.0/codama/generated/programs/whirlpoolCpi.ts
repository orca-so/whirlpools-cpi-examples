/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedGraduateTokenToOrcaInstruction } from '../instructions';

export const WHIRLPOOL_CPI_PROGRAM_ADDRESS =
  '23WKGEsTRVZiVuwg8eyXByPq2xkzTR8v6TW4V1WiT89g' as Address<'23WKGEsTRVZiVuwg8eyXByPq2xkzTR8v6TW4V1WiT89g'>;

export enum WhirlpoolCpiInstruction {
  GraduateTokenToOrca,
}

export function identifyWhirlpoolCpiInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): WhirlpoolCpiInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 30, 71, 244, 97, 6, 1, 237])
      ),
      0
    )
  ) {
    return WhirlpoolCpiInstruction.GraduateTokenToOrca;
  }
  throw new Error(
    'The provided instruction could not be identified as a whirlpoolCpi instruction.'
  );
}

export type ParsedWhirlpoolCpiInstruction<
  TProgram extends string = '23WKGEsTRVZiVuwg8eyXByPq2xkzTR8v6TW4V1WiT89g',
> = {
  instructionType: WhirlpoolCpiInstruction.GraduateTokenToOrca;
} & ParsedGraduateTokenToOrcaInstruction<TProgram>;
